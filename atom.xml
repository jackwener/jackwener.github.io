<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>jakevin的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-04-19T18:08:21.502Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>jakevin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux</title>
    <link href="http://yoursite.com/2018/04/20/Linux/"/>
    <id>http://yoursite.com/2018/04/20/Linux/</id>
    <published>2018-04-19T17:57:12.000Z</published>
    <updated>2018-04-19T18:08:21.502Z</updated>
    
    <content type="html"><![CDATA[<h1 id="开坑Linux啦"><a href="#开坑Linux啦" class="headerlink" title="开坑Linux啦"></a>开坑Linux啦</h1><blockquote><p>从开学进来已经相当久了，但是感觉学的东西很少，平时也是比较迷茫，不知道学什么，上次进行了联创的春招熬测后，确实是收获很多，有了很多想法，ps(挺感谢这个组织的，大概也是从想进联创开始入的计算机的坑吧，很想加入它，但是想来希望不大了，以后可能还会以学习的心态去看看考试题，没报什么希望)，后面很长时间可能一直待在Linux的坑里面。</p></blockquote><h2 id="书单计划"><a href="#书单计划" class="headerlink" title="书单计划"></a>书单计划</h2><ol><li>Linux/Unix系统编程手册</li><li>Linux/Unix编程实践教程</li><li>深入理解Linux内核</li><li>清华的操作系统的课</li><li>UNP卷一</li></ol><p>另外这次也去看看了冰岩的程序组，感觉后端似乎也挺好玩，或许会开新的坑。</p><p>ACM还是要继续(划水)，好玩的东西</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;开坑Linux啦&quot;&gt;&lt;a href=&quot;#开坑Linux啦&quot; class=&quot;headerlink&quot; title=&quot;开坑Linux啦&quot;&gt;&lt;/a&gt;开坑Linux啦&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;从开学进来已经相当久了，但是感觉学的东西很少，平时也是比较迷茫，不
      
    
    </summary>
    
    
      <category term="1. Linux" scheme="http://yoursite.com/tags/1-Linux/"/>
    
  </entry>
  
  <entry>
    <title>CSAPP datelab（伪）报告</title>
    <link href="http://yoursite.com/2018/04/14/datelab/"/>
    <id>http://yoursite.com/2018/04/14/datelab/</id>
    <published>2018-04-14T10:43:19.000Z</published>
    <updated>2018-04-17T15:06:57.179Z</updated>
    
    <content type="html"><![CDATA[<p>CSAPP的第一个Lab<br><a id="more"></a></p><h1 id="CSAPP-datelab"><a href="#CSAPP-datelab" class="headerlink" title="CSAPP datelab"></a>CSAPP datelab</h1><blockquote><p>读CSAPP这本书的过程中出现了很多的困难，同时，我读这本书时间耗时很长但是<br>又完全没有弄懂很多东西，在迷迷糊糊的把书看完一遍后开始准备做配套的lab已以及准备南大的计算机系统配套的实验在这个过程中重新把书看一遍。</p></blockquote><blockquote><p>另外做这个Lab感觉难度不小，后面可能要补补离散</p></blockquote><p>datelab分为3个部分，位操作，整数操作，浮点操作</p><h2 id="位操作"><a href="#位操作" class="headerlink" title="位操作"></a>位操作</h2><h3 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 1 √</span></span><br><span class="line"><span class="comment"> * bitAnd - x&amp;y using only ~ and |</span></span><br><span class="line"><span class="comment"> *   Example: bitAnd(6, 5) = 4</span></span><br><span class="line"><span class="comment"> *   Legal ops: ~ |</span></span><br><span class="line"><span class="comment"> *   Max ops: 8</span></span><br><span class="line"><span class="comment"> *   Rating: 1</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>这个比较简单<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bitAnd</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ~((~x) | (~y));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 2 √</span></span><br><span class="line"><span class="comment"> * getByte - Extract byte n from word x</span></span><br><span class="line"><span class="comment"> *   Bytes numbered from 0 (LSB) to 3 (MSB)</span></span><br><span class="line"><span class="comment"> *   Examples: getByte(0x12345678,1) = 0x56</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 6</span></span><br><span class="line"><span class="comment"> *   Rating: 2</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>提取一个数字的n字节,这里使用掩码0xFF来取一个字节<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getByte</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (x&gt;&gt;(n&lt;&lt;<span class="number">3</span>)) &amp; <span class="number">0xFF</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 3 √</span></span><br><span class="line"><span class="comment"> * logicalShift - shift x to the right by n, using a logical shift</span></span><br><span class="line"><span class="comment"> *   Can assume that 0 &lt;= n &lt;= 31</span></span><br><span class="line"><span class="comment"> *   Examples: logicalShift(0x87654321,4) = 0x08765432</span></span><br><span class="line"><span class="comment"> *   Legal ops: ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 20</span></span><br><span class="line"><span class="comment"> *   Rating: 3</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>取出高位，然后把高位变为0（使用掩码）<br>最后把取出的高位放回去<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">logicalShift</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> a=x&amp;(<span class="number">1</span>&lt;&lt;<span class="number">31</span>);</span><br><span class="line">  <span class="keyword">int</span> b=x&amp;(~(<span class="number">1</span>&lt;&lt;<span class="number">31</span>));</span><br><span class="line">  b&gt;&gt;=n;</span><br><span class="line">  b |= (a&gt;&gt;n)&amp;(<span class="number">1</span>&lt;&lt;<span class="number">32</span>+~n)<span class="comment">/*大坑.....注意a也是逻辑右移所以要用掩码取位*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="第四题"><a href="#第四题" class="headerlink" title="第四题"></a>第四题</h3><blockquote><p>/* 4 √</p><ul><li>bitCount - returns count of number of 1’s in word</li><li>Examples: bitCount(5) = 2, bitCount(7) = 3</li><li>Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</li><li>Max ops: 40</li><li>Rating: 4</li></ul></blockquote><p>ACM做题的时候分治法的时候讲过，把32位的数分为16组，每组的两个数相加，得到16个数，然后重复即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bitCount</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> bits = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> mask = <span class="number">0x1</span> | (<span class="number">0x1</span> &lt;&lt; <span class="number">8</span>) | (<span class="number">0x1</span> &lt;&lt; <span class="number">16</span>) | (<span class="number">0x1</span> &lt;&lt; <span class="number">24</span>);</span><br><span class="line">    bits += (x &amp; mask);</span><br><span class="line">    bits += ((x &gt;&gt; <span class="number">1</span>) &amp; mask);</span><br><span class="line">    bits += ((x &gt;&gt; <span class="number">2</span>) &amp; mask);</span><br><span class="line">    bits += ((x &gt;&gt; <span class="number">3</span>) &amp; mask);</span><br><span class="line">    bits += ((x &gt;&gt; <span class="number">4</span>) &amp; mask);</span><br><span class="line">    bits += ((x &gt;&gt; <span class="number">5</span>) &amp; mask);</span><br><span class="line">    bits += ((x &gt;&gt; <span class="number">6</span>) &amp; mask);</span><br><span class="line">    bits += ((x &gt;&gt; <span class="number">7</span>) &amp; mask);</span><br><span class="line">    <span class="keyword">return</span> (bits &amp; <span class="number">0xFF</span>) + ((bits &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>) + ((bits &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>) + ((bits &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第五题"><a href="#第五题" class="headerlink" title="第五题"></a>第五题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/* 5 √</span><br><span class="line"> * bang - Compute !x without using !</span><br><span class="line"> *   Examples: bang(3) = 0, bang(0) = 1</span><br><span class="line"> *   Legal ops: ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span><br><span class="line"> *   Max ops: 12</span><br><span class="line"> *   Rating: 4</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><p>计算数字的逆（！）<br>很巧妙，0的特征，0和0的相反数首位按位或为0<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bang</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ((x|(~x+<span class="number">1</span>))&gt;&gt;<span class="number">31</span>)&amp;<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="补码运算"><a href="#补码运算" class="headerlink" title="补码运算"></a>补码运算</h2><h3 id="第六题"><a href="#第六题" class="headerlink" title="第六题"></a>第六题</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">tmin</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span>(<span class="number">1</span>&lt;&lt;<span class="number">31</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第七题"><a href="#第七题" class="headerlink" title="第七题"></a>第七题</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">思路：</span><br><span class="line">分正负数，分别前面为<span class="number">0</span>或<span class="number">1</span>，只需判断<span class="number">32</span>-n是否全<span class="number">0</span>或<span class="number">1</span>，通过掩码取这些位即可</span><br><span class="line">```c</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fitsBits</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !((x &lt;&lt; (<span class="number">33</span> + ~n) &gt;&gt; (<span class="number">33</span> + ~n))^x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第八题"><a href="#第八题" class="headerlink" title="第八题"></a>第八题</h3><p>题意：数除以2^n<br>对于正数直接算术右移即可，对于负数</p><h3 id="第九题"><a href="#第九题" class="headerlink" title="第九题"></a>第九题</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">negate</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> ~x + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第十题"><a href="#第十题" class="headerlink" title="第十题"></a>第十题</h3><p>判断正数，高位为0避开0；<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isPositive</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (!(x &gt;&gt; <span class="number">31</span>)) ^ (!(x ^ <span class="number">0</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CSAPP的第一个Lab&lt;br&gt;
    
    </summary>
    
    
      <category term="CSAPP" scheme="http://yoursite.com/tags/CSAPP/"/>
    
  </entry>
  
  <entry>
    <title>读csapp中的感悟</title>
    <link href="http://yoursite.com/2018/03/19/%E8%AF%BBcsapp%E4%B8%AD%E7%9A%84%E6%84%9F%E6%82%9F/"/>
    <id>http://yoursite.com/2018/03/19/读csapp中的感悟/</id>
    <published>2018-03-19T02:16:58.000Z</published>
    <updated>2018-03-19T02:18:12.226Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="csapp" scheme="http://yoursite.com/tags/csapp/"/>
    
      <category term="读书感悟" scheme="http://yoursite.com/tags/%E8%AF%BB%E4%B9%A6%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
</feed>
