<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>jakevin的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-05-09T12:57:13.198Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>jakevin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>linux/unix系统编程手册 7章习题</title>
    <link href="http://yoursite.com/2018/05/09/tlpi8%E7%AB%A0%E4%B9%A0%E9%A2%98/"/>
    <id>http://yoursite.com/2018/05/09/tlpi8章习题/</id>
    <published>2018-05-09T12:03:03.000Z</published>
    <updated>2018-05-09T12:57:13.198Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第8章"><a href="#第8章" class="headerlink" title="第8章"></a>第8章</h2><h3 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h3><blockquote><p>肠胃病每周大概都有那么几次,今天又犯了,整个人身体都不太好,没啥精神,写点总结文字,当做看后复习.</p></blockquote><p>第8章主要是介绍了用户和组的一些基本知识,为后面更深入的知识做了铺垫,介绍了讲了用户和组，还有记录用户的密码文件/etc/passwd，shadow密码文件/etc/shadow还有组文件/etc/group。</p><p>每个用户都有唯一的用户名和相关的用户标识符（UID）。用户可以属于一个或多个组，每个组都有唯一的组名和相关的组标识符（GID）。</p><p>用户和组的用途为：1、可以确定各种系统资源的所有权；2、对赋予进程访问上述资源的权限加以控制。</p><p>密码文件/etc/passwd<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">lancelot@debian:~$ cat /etc/passwd</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">daemon:x:1:1:daemon:/usr/sbin:/bin/sh</span><br><span class="line">bin:x:2:2:bin:/bin:/bin/sh</span><br><span class="line">sys:x:3:3:sys:/dev:/bin/sh</span><br><span class="line">sync:x:4:65534:sync:/bin:/bin/sync</span><br><span class="line">games:x:5:60:games:/usr/games:/bin/sh</span><br><span class="line">man:x:6:12:man:/var/cache/man:/bin/sh</span><br><span class="line">lp:x:7:7:lp:/var/spool/lpd:/bin/sh</span><br><span class="line">mail:x:8:8:mail:/var/mail:/bin/sh</span><br><span class="line">news:x:9:9:news:/var/spool/news:/bin/sh</span><br><span class="line">uucp:x:10:10:uucp:/var/spool/uucp:/bin/sh</span><br><span class="line">proxy:x:13:13:proxy:/bin:/bin/sh</span><br><span class="line">www-data:x:33:33:www-data:/var/www:/bin/sh</span><br><span class="line">backup:x:34:34:backup:/var/backups:/bin/sh</span><br><span class="line">list:x:38:38:Mailing List Manager:/var/list:/bin/sh</span><br><span class="line">irc:x:39:39:ircd:/var/run/ircd:/bin/sh</span><br><span class="line">gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/bin/sh</span><br><span class="line">nobody:x:65534:65534:nobody:/nonexistent:/bin/sh</span><br><span class="line">libuuid:x:100:101::/var/lib/libuuid:/bin/sh</span><br><span class="line">messagebus:x:101:105::/var/run/dbus:/bin/false</span><br><span class="line">colord:x:102:106:colord colour management daemon,,,:/var/lib/colord:/bin/false</span><br><span class="line">usbmux:x:103:46:usbmux daemon,,,:/home/usbmux:/bin/false</span><br><span class="line">Debian-exim:x:104:112::/var/spool/exim4:/bin/false</span><br><span class="line">avahi:x:105:115:Avahi mDNS daemon,,,:/var/run/avahi-daemon:/bin/false</span><br><span class="line">pulse:x:106:116:PulseAudio daemon,,,:/var/run/pulse:/bin/false</span><br><span class="line">speech-dispatcher:x:107:29:Speech Dispatcher,,,:/var/run/speech-dispatcher:/bin/sh</span><br><span class="line">hplip:x:108:7:HPLIP system user,,,:/var/run/hplip:/bin/false</span><br><span class="line">sshd:x:109:65534::/var/run/sshd:/usr/sbin/nologin</span><br><span class="line">rtkit:x:110:118:RealtimeKit,,,:/proc:/bin/false</span><br><span class="line">statd:x:111:65534::/var/lib/nfs:/bin/false</span><br><span class="line">saned:x:112:119::/home/saned:/bin/false</span><br><span class="line">Debian-gdm:x:113:120:Gnome Display Manager:/var/lib/gdm3:/bin/false</span><br><span class="line">lancelot:x:1000:1000:lancelot,,,:/home/lancelot:/bin/bash</span><br><span class="line">mysql:x:114:121:MySQL Server,,,:/nonexistent:/bin/false</span><br><span class="line">ftp:x:115:122:ftp daemon,,,:/srv/ftp:/bin/false</span><br><span class="line">telnetd:x:116:124::/nonexistent:/bin/false</span><br></pre></td></tr></table></figure></p><p>第一个字段是登录名；第二个字段是经过加密后的密码（x），实际上经过加密后的密码是存放在shadow密码文件；</p><p>第三个字段是用户的ID（UID）；第四个字段是组ID（GID）；第五个字段是注释；</p><p>第六个字段是主目录，是用户登录后的初始路径；第七个字段是登录shell。</p><p>实际存放密码的shadow 密码文件/etc/shadow<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lancelot:$6$tnTgvJYU$OhoUNZNIeNU7rlZf/f14oD2g.Uz8SbrnWeZbR4yL4XXRvzbCeijsAZE7Y9HlzU4thKVBVcqucwntJBi/4BoY60:15880:0:99999:7:::</span><br><span class="line">mysql:!:15905:0:99999:7:::</span><br><span class="line">ftp:*:16039:0:99999:7:::</span><br><span class="line">telnetd:*:16180:0:99999:7:::</span><br></pre></td></tr></table></figure></p><p>第一个字段为用户登录名，第二个字段为见过加密后的密码，后面的字段为与安全性相关的字段。</p><p>看组文件/etc/group</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">lancelot@debian:~$ cat /etc/group</span><br><span class="line">root:x:0:</span><br><span class="line">daemon:x:1:</span><br><span class="line">bin:x:2:</span><br><span class="line">sys:x:3:</span><br><span class="line">adm:x:4:</span><br><span class="line">tty:x:5:</span><br><span class="line">disk:x:6:</span><br><span class="line">lp:x:7:</span><br><span class="line">mail:x:8:</span><br><span class="line">news:x:9:</span><br><span class="line">uucp:x:10:</span><br><span class="line">man:x:12:</span><br><span class="line">proxy:x:13:</span><br><span class="line">kmem:x:15:</span><br><span class="line">dialout:x:20:</span><br><span class="line">fax:x:21:</span><br><span class="line">voice:x:22:</span><br><span class="line">cdrom:x:24:lancelot</span><br><span class="line">floppy:x:25:lancelot</span><br><span class="line">tape:x:26:</span><br><span class="line">sudo:x:27:</span><br><span class="line">audio:x:29:pulse,lancelot</span><br><span class="line">dip:x:30:lancelot</span><br><span class="line">www-data:x:33:</span><br><span class="line">backup:x:34:</span><br><span class="line">operator:x:37:</span><br><span class="line">list:x:38:</span><br><span class="line">irc:x:39:</span><br><span class="line">src:x:40:</span><br><span class="line">gnats:x:41:</span><br><span class="line">shadow:x:42:</span><br><span class="line">utmp:x:43:telnetd</span><br><span class="line">video:x:44:lancelot</span><br><span class="line">sasl:x:45:</span><br><span class="line">plugdev:x:46:lancelot</span><br><span class="line">staff:x:50:</span><br><span class="line">games:x:60:</span><br><span class="line">users:x:100:</span><br><span class="line">nogroup:x:65534:</span><br><span class="line">libuuid:x:101:</span><br><span class="line">crontab:x:102:</span><br><span class="line">fuse:x:103:</span><br><span class="line">scanner:x:104:saned,lancelot</span><br><span class="line">messagebus:x:105:</span><br><span class="line">colord:x:106:</span><br><span class="line">lpadmin:x:107:</span><br><span class="line">ssl-cert:x:108:</span><br><span class="line">bluetooth:x:109:lancelot</span><br><span class="line">utempter:x:110:</span><br><span class="line">netdev:x:111:lancelot</span><br><span class="line">Debian-exim:x:112:</span><br><span class="line">mlocate:x:113:</span><br><span class="line">ssh:x:114:</span><br><span class="line">avahi:x:115:</span><br><span class="line">pulse:x:116:</span><br><span class="line">pulse-access:x:117:</span><br><span class="line">rtkit:x:118:</span><br><span class="line">saned:x:119:</span><br><span class="line">Debian-gdm:x:120:</span><br><span class="line">lancelot:x:1000:</span><br><span class="line">mysql:x:121:</span><br><span class="line">ftp:x:122:</span><br><span class="line">vboxusers:x:123:</span><br><span class="line">telnetd:x:124:</span><br></pre></td></tr></table></figure><p>第一个字段是组的名称，第二个字段是经过加密的密码，第三个字段是组ID（GID），第四个字段是用户列表。</p><p>对于加密后的密码存放在类似/etc/shadow的文件（/etc/gshadow），格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">cdrom:*::lancelot</span><br><span class="line">floppy:*::lancelot</span><br><span class="line">tape:*::</span><br><span class="line">sudo:*::</span><br><span class="line">audio:*::pulse,lancelot</span><br><span class="line">dip:*::lancelot</span><br><span class="line">www-data:*::</span><br><span class="line">backup:*::</span><br><span class="line">operator:*::</span><br><span class="line">list:*::</span><br><span class="line">irc:*::</span><br><span class="line">src:*::</span><br><span class="line">gnats:*::</span><br><span class="line">shadow:*::</span><br><span class="line">utmp:*::telnetd</span><br><span class="line">video:*::lancelot</span><br></pre></td></tr></table></figure><h3 id="习题8-1"><a href="#习题8-1" class="headerlink" title="习题8.1"></a>习题8.1</h3><p>书上的习题应该是错的,也就是注释部分,结果是1000 ,0和题目描述不符</p><p>搜了下,改成下面的就是一样的了,说是因为,指针指向的地址一样,但自己没想明白,先搁着吧….<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pwd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">passwd</span> *<span class="title">p1</span>, *<span class="title">p2</span>;</span></span><br><span class="line">    p1 = getpwnam(<span class="string">"jakevin"</span>);</span><br><span class="line">    p2 = getpwnam(<span class="string">"root"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%ld %ld\n"</span>,(<span class="keyword">long</span>)p1-&gt;pw_uid,(<span class="keyword">long</span>)p2-&gt;pw_uid);</span><br><span class="line">    <span class="comment">/* printf("%ld %ld\n", (long)(getpwnam("jakevin")-&gt;pw_uid), (long)(getpwnam("root")-&gt;pw_uid));</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>—–身体不好,感觉此章没看好,待更—–</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;第8章&quot;&gt;&lt;a href=&quot;#第8章&quot; class=&quot;headerlink&quot; title=&quot;第8章&quot;&gt;&lt;/a&gt;第8章&lt;/h2&gt;&lt;h3 id=&quot;笔记&quot;&gt;&lt;a href=&quot;#笔记&quot; class=&quot;headerlink&quot; title=&quot;笔记&quot;&gt;&lt;/a&gt;笔记&lt;/h3&gt;&lt;b
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="unix系统编程手册" scheme="http://yoursite.com/tags/unix%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>linux/unix系统编程手册 7章习题</title>
    <link href="http://yoursite.com/2018/05/08/tlpi7%E7%AB%A0%E4%B9%A0%E9%A2%98/"/>
    <id>http://yoursite.com/2018/05/08/tlpi7章习题/</id>
    <published>2018-05-08T05:48:49.000Z</published>
    <updated>2018-05-08T08:03:23.511Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>看的过程中发现自己C学的很不好啊 ……</p><p>之前CSAPP没坚持下来,后面把CSAPP搞定吧…</p><p>太菜了╮(╯▽╰)╭</p></blockquote><h3 id="7-1"><a href="#7-1" class="headerlink" title="7-1"></a>7-1</h3><p> 修改程序清单7-1中的程序，在每次malloc后打印program break 的值。指定一个较小的内存分配尺寸，观察现象，证明的每次malloc后program break分配了超过所需的内存区域。</p><p> 7-1 修改程序清单7-1中的程序，在每次malloc后打印program break 的值。指定一个较小的内存分配尺寸，观察现象，证明的每次malloc后program break分配了超过所需的内存区域。<br>我们可以通过一个更简单的程序来实现观察所需的功能。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"now : %10p\n"</span>, sbrk(<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">char</span> * a;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="number">10</span>; i++)</span><br><span class="line">    &#123;   </span><br><span class="line">        a = <span class="built_in">malloc</span>(<span class="number">50000</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d : %10p\n"</span>,i, sbrk(<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行程序输出如下：</p><blockquote><p>now : 0xaf060fc000</p></blockquote><blockquote><p>0 : 0xaf0611d000</p></blockquote><blockquote><p>1 : 0xaf0611d000</p></blockquote><blockquote><p>2 : 0xaf06141000</p></blockquote><blockquote><p>3 : 0xaf06141000</p></blockquote><blockquote><p>4 : 0xaf06141000</p></blockquote><blockquote><p>5 : 0xaf06166000</p></blockquote><blockquote><p>6 : 0xaf06166000</p></blockquote><blockquote><p>7 : 0xaf06166000</p></blockquote><blockquote><p>8 : 0xaf0618b000</p></blockquote><blockquote><p>9 : 0xaf0618b000</p></blockquote><p>我们可以看到每次实际上边界分配了空间大于我们所需的空间。</p><h3 id="7-2"><a href="#7-2" class="headerlink" title="7-2"></a>7-2</h3><p>实现malloc()和free()。<br>根据课本可以知道，malloc和free是对堆操作的包装，也就是brk函数的包装，在堆空间进行的数据结构的操作</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;看的过程中发现自己C学的很不好啊 ……&lt;/p&gt;
&lt;p&gt;之前CSAPP没坚持下来,后面把CSAPP搞定吧…&lt;/p&gt;
&lt;p&gt;太菜了╮(╯▽╰)╭&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;7-1&quot;&gt;&lt;a href=&quot;#7-1&quot; class=&quot;
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="unix系统编程手册" scheme="http://yoursite.com/tags/unix%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>linux/unix系统编程手册 6章习题</title>
    <link href="http://yoursite.com/2018/05/07/tlpi6%E7%AB%A0%E4%B9%A0%E9%A2%98/"/>
    <id>http://yoursite.com/2018/05/07/tlpi6章习题/</id>
    <published>2018-05-07T09:22:22.000Z</published>
    <updated>2018-05-08T08:03:35.114Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>定了个小计划,大概能2-3天看一章并做习题,这套书感觉也可能不会看完,实在太多了,看了1本之后估计后面当手册翻翻</p></blockquote><blockquote><p>这章环境那一些看的不太懂2333</p></blockquote><h3 id="6-1"><a href="#6-1" class="headerlink" title="6-1"></a>6-1</h3><blockquote><p>编译程序清单6-1中的程序，使用ls -l命令显示可执行文件的大小，解释为什么可执行文件的大小远小于10MB，但是程序中包含了一个10MB的数组？</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">char</span> globBuf[<span class="number">65536</span>];</span><br><span class="line"><span class="keyword">int</span> primes[] = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">square</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result;</span><br><span class="line">    result = x * x;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doCalc</span><span class="params">(<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"The square of %d is %d\n"</span>, val, square(val));</span><br><span class="line">    <span class="keyword">if</span> (val &lt; <span class="number">1000</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> t;</span><br><span class="line">        t = val * val * val;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"The cube of %d is %d\n"</span>, val, t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> key = <span class="number">9973</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span> mbuf[<span class="number">10240000</span>];</span><br><span class="line">    <span class="keyword">char</span>* p;</span><br><span class="line">    p = <span class="built_in">malloc</span>(<span class="number">1024</span>);</span><br><span class="line">    doCalc(key);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_SUCCESS);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>编译后占用体积的部分主要是</p><blockquote><p>char globBuf[65536];</p></blockquote><p>至于</p><blockquote><p>static int key = 9973;</p></blockquote><blockquote><p>static char mbuf[10240000];</p></blockquote><p>未初始化的部分不分配空间,后面等程序加载器分配</p><h3 id="6-2"><a href="#6-2" class="headerlink" title="6-2"></a>6-2</h3><p>编写程序，观察longjmp函数试图跳转到一个已经返回的函数中会出现什么。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;setjmp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">jmp_buf env;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">x</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (setjmp(env) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"1\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"2\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">y</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    longjmp(env, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"3\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x();</span><br><span class="line">    y();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"4\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>出现</p><p>1</p><p>2</p><p>4</p><p>原因书上有解释,尝试返回一个释放了的栈帧.<br>这个题按着书上 滥用longjmp()部分写就可以了</p><h3 id="6-3"><a href="#6-3" class="headerlink" title="6-3"></a>6-3</h3><p>使用getenv()函数，putenv()函数来实现setenv()和unsetenv()函数。unsetenv函数需要将多个同名的环境变量都移除。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;定了个小计划,大概能2-3天看一章并做习题,这套书感觉也可能不会看完,实在太多了,看了1本之后估计后面当手册翻翻&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;这章环境那一些看的不太懂2333&lt;/p&gt;
&lt;/blockquote
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="unix系统编程手册" scheme="http://yoursite.com/tags/unix%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>linux/unix系统编程手册 5章习题</title>
    <link href="http://yoursite.com/2018/05/06/tlpi5%E7%AB%A0%E4%B9%A0%E9%A2%98/"/>
    <id>http://yoursite.com/2018/05/06/tlpi5章习题/</id>
    <published>2018-05-06T08:20:51.000Z</published>
    <updated>2018-05-07T14:46:31.597Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一本书600页,2本1000多页,好多啊 QAQ</p></blockquote><h3 id="5-1"><a href="#5-1" class="headerlink" title="5-1"></a>5-1</h3><p>请使用标准I/O系统调用（open和lseek）和off_t数据类型修改程序清单5-3中的程序。将宏_FILE_OFFSET_BITS的值设置为64进行编译，并测试该程序是否能够成功创建一个大文件。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _FILE_OFFSET_BITS 64</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fd;</span><br><span class="line">    <span class="keyword">off_t</span> off;</span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">3</span> ||<span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">"--help"</span>) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"pathname or offset erroe"</span>);</span><br><span class="line">        _exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fd = open(argv[<span class="number">1</span>],O_RDWR|O_CREAT,S_IRUSR|S_IWUSR);</span><br><span class="line">    <span class="keyword">if</span>(fd == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"open error"</span>);</span><br><span class="line">        _exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    off = atoll(argv[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">if</span>(lseek(fd,off,SEEK_SET) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"lseek error"</span>);</span><br><span class="line">        _exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(write(fd,<span class="string">"test"</span>,SEEK_SET) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"write error"</span>);</span><br><span class="line">        _exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>编译运行结果好像是错的…没查出Bug,照着书上打的,应该感觉没问题 (? _ ?)</p></blockquote><h3 id="5-2"><a href="#5-2" class="headerlink" title="5-2"></a>5-2</h3><p>编写一个程序，使用O_APPEND标志并以写方式打开一个已存在的文件，且将文件偏移量置于文件起始处，在写入数据。数据会显示在文件中的哪个位置？为什么？</p><p>在设置了O_APPEND标志后，对打开文件的写入操作write会变成一个包含有文件偏移和写入的一个原子操作，强制在文件的结尾写入，所以在写入之前使用lseek也没有办法改变写入的位置。但是可以通过lseek在文件的任意位置读取。</p><h3 id="5-3"><a href="#5-3" class="headerlink" title="5-3"></a>5-3</h3><p>编写程序，接受最多3个命令参数</p><blockquote><p>$ atomic_append filename num-bytes [x]</p></blockquote><p>该程序打开或创建指定文件，然后每次调用write()写入一个字节的方式，向文件结尾添加num-bytes个字节。若没有参数x，使用O_APPEND标志打开文件，否则不使用该标志打开文件。而是使用lseek(fd,0,SEEK_END)并write来追加内容。运行如下命令，解释ls -l两个文件大小的为什么不同。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, fd, flags, numBytes;</span><br><span class="line">    <span class="keyword">off_t</span> off;</span><br><span class="line"></span><br><span class="line">    flags = O_RDWR | O_CREAT;</span><br><span class="line">    <span class="keyword">if</span>(argc &lt; <span class="number">3</span> || <span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">"--help"</span>) == <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"parameter error"</span>);</span><br><span class="line">        _exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(argc != <span class="number">4</span>)</span><br><span class="line">        flags = flags | O_APPEND;</span><br><span class="line"></span><br><span class="line">    numBytes = atoi(argv[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">    fd = open(argv[<span class="number">1</span>], flags, S_IRUSR | S_IWUSR);</span><br><span class="line">    <span class="keyword">if</span>(fd == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"open error"</span>);</span><br><span class="line">        _exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span> buff = <span class="string">'a'</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; numBytes; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(argc &gt; <span class="number">3</span> &amp;&amp; argv[<span class="number">3</span>] == <span class="string">"x"</span>)</span><br><span class="line">            <span class="keyword">if</span>(lseek(fd, <span class="number">0</span>, SEEK_END) == <span class="number">-1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"lseek error"</span>);</span><br><span class="line">        _exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(write(fd, &amp;buff, <span class="number">1</span>) != <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"write error"</span>);</span><br><span class="line">        _exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><blockquote><p>jakevin@jakevin-PC:~/Linux系统编程手册$ ./automic_append f1 1000000 &amp; ./automic_append f1 1000000<br>[1] 7783</p></blockquote><blockquote><p>jakevin@jakevin-PC:~/Linux系统编程手册$ ./automic_append f2 1000000 x &amp; ./automic_append f2 1000000 x<br>[2] 7789<br>[1]   已完成               ./automic_append f1 1000000<br>[2]+  已完成               ./automic_append f2 1000000 x</p></blockquote><blockquote><p>jakevin@jakevin-PC:~/Linux系统编程手册$ ls -l f1 f2</p></blockquote><blockquote><p>-rw——- 1 jakevin jakevin 2000000 May  7 17:00 f1</p></blockquote><blockquote><p>-rw——- 1 jakevin jakevin 1000000 May  7 17:00 f2</p></blockquote><p>原因书上很清楚了,类似独占文件的那个例子</p><h3 id="5-4"><a href="#5-4" class="headerlink" title="5-4"></a>5-4</h3><p>使用fcntl()和close()来实现dup()和dup2()。dup2()在处理oldfd和newfd相等时，应检查oldfd是否有效，测试fcntl(oldfd, F_GETFL)是否成功就可以达到这一点。若oldfd无效，则dup2返回-1，并将errno置为EBADF。</p><blockquote><p>注意点:使用fcntl()和close()来实现dup()和dup2()。务必牢记dup2()需要处理的一种特殊情况，即oldfd与newfd相等。这时，应检查oldfd是否有效，测试fcntl(oldfd, F_GETFL)是否成功就能达到这一目标。若oldfd无效，则dup2()将返回-1,并将errno置为EBADF。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;  </span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fcntl</span><span class="params">(<span class="keyword">int</span> filedes, <span class="keyword">int</span> cmd, ...)</span></span>;</span><br></pre></td></tr></table></figure><p>当第二个参数cmd=F_DUPFD时，它的作用是根据filedes复制一个新文件描述符。此时，fcntl相当于dup和dup2函数。<br>第三个参数指出新复制的文件描述符是一个等于或大于该参数的可用文件描述符，且不能等于一个已有的文件描述符。如果第三个参数等于一个已有文件描述符，则取一个大于该参数的一个可用描述符。</p><p>DUPFD：duplicate（复制）File（文件）Description（描述）</p><h3 id="5-5"><a href="#5-5" class="headerlink" title="5-5"></a>5-5</h3><p>编写一程序，验证文件描述符及其副本是否共享了文件偏移量和打开文件的状态标识。</p><h3 id="5-6"><a href="#5-6" class="headerlink" title="5-6"></a>5-6</h3><p> 说明下列代码中每次执行write后，输出文件的内容是什么，为什么。<br> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fd1 = open(file, O_RDWR | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR);</span><br><span class="line"> fd2 = dup(fd1);</span><br><span class="line"> fd3 = open(file, O_RDWR);</span><br><span class="line"> write(fd1, <span class="string">"Hello,"</span>, <span class="number">6</span>);</span><br><span class="line"> write(fd2, <span class="string">" world"</span>, <span class="number">6</span>);</span><br><span class="line"> <span class="comment">//这里按照答案的解释，应该是有一个空格在world前面的，书上可能是印错了</span></span><br><span class="line"> lseek(fd2, <span class="number">0</span>, SEEK_SET);</span><br><span class="line"> write(fd1, <span class="string">"HELLO,"</span>, <span class="number">6</span>);</span><br><span class="line"> write(fd3, <span class="string">"Gidday"</span>, <span class="number">6</span>);</span><br></pre></td></tr></table></figure></p><blockquote><p>第一次write，文件变成了Hello,，第二次写入，继续在后面加上world，注意这里应该是有一个空格的，否则最后和答案对不上。第三次write，由于偏移至头，所以第三次覆盖了第一次的6个字符，变成了HELLO, world，第四次fd3的偏移量是0，所以也是从头开始写，覆盖了第三次的HELLO变成了Gidday world</p></blockquote><h3 id="5-7"><a href="#5-7" class="headerlink" title="5-7"></a>5-7</h3><p> 使用read()、write()、malloc()实现readv，writev函数功能。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;一本书600页,2本1000多页,好多啊 QAQ&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;5-1&quot;&gt;&lt;a href=&quot;#5-1&quot; class=&quot;headerlink&quot; title=&quot;5-1&quot;&gt;&lt;/a&gt;5-1&lt;/h3&gt;&lt;p&gt;请使用标准I/
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="unix系统编程手册" scheme="http://yoursite.com/tags/unix%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>linux/unix系统编程手册 4章习题</title>
    <link href="http://yoursite.com/2018/05/04/tlpi4%E7%AB%A0%E4%B9%A0%E9%A2%98/"/>
    <id>http://yoursite.com/2018/05/04/tlpi4章习题/</id>
    <published>2018-05-04T06:21:00.000Z</published>
    <updated>2018-05-07T09:33:32.948Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>作为一个咸鱼废了好久,期中很多考试,复习有点无聊,开始之前准备看的linux/unix系统编程手册</p></blockquote><p>另外去官网找源代码和头文件,make失败,尝试了一会儿就放弃了,毕竟影响不大</p><h3 id="4-1"><a href="#4-1" class="headerlink" title="4-1"></a>4-1</h3><p>tee命令是从标准输入中读取数据，直至文件结尾，随后将数据写入标准输出和命令行参数所指定的文件。请使用I/O系统调用实现tee命令。默认情况下，若已存在与命令行参数指定文件名同名的文件，tee命令将其覆盖。或者，当使用-a命令时，则在同名文件后面追加数据。</p><p>tee –help<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ tee --help</span><br><span class="line">用法：tee [选项]... [文件]...</span><br><span class="line">将标准输入复制到每个指定文件，并显示到标准输出。</span><br><span class="line"></span><br><span class="line">  -a, --append          内容追加到给定的文件而非覆盖</span><br><span class="line">  -i, --ignore-interrupts       忽略中断信号</span><br><span class="line">  -p                        diagnose errors writing to non pipes</span><br><span class="line">      --output-error[=MODE]   set behavior on write error.  See MODE below</span><br><span class="line">      --help            显示此帮助信息并退出</span><br><span class="line">      --version         显示版本信息并退出</span><br></pre></td></tr></table></figure></p><p>实现这个命令主要是这章介绍的 通用I/O模型 中的open(),close(),read(),write().<br>另外使用到了附录中的getopt();</p><blockquote><p>另外感觉自己只有看到习题才能起看书的兴致,果然以后看书先看题再看书也不错</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">teeConfigStruct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">char</span> *outputPath;</span><br><span class="line">    <span class="keyword">int</span> outputFd;</span><br><span class="line">&#125; teeConfig;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getArgs</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *<span class="keyword">const</span> argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> opt;</span><br><span class="line">    <span class="keyword">if</span> ((opt = getopt(argc, argv, <span class="string">"a"</span>)) != <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        teeConfig.a = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">switch</span> (opt)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'a'</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"追加模式\n"</span>);</span><br><span class="line">            teeConfig.a = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"参数错误\n"</span>);</span><br><span class="line">            _exit(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (argc - optind &lt; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"参数太少\n"</span>);</span><br><span class="line">        _exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    teeConfig.outputPath = argv[optind];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"输出路径 %s \n"</span>, teeConfig.outputPath);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * <span class="keyword">const</span> argv[])</span></span>&#123;</span><br><span class="line">    getArgs(argc, argv);</span><br><span class="line">    <span class="keyword">int</span> outputFileFlag;</span><br><span class="line">    <span class="keyword">if</span>(teeConfig.a == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        outputFileFlag =O_RDWR | O_CREAT | O_APPEND;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        outputFileFlag = O_RDWR | O_CREAT | O_TRUNC;</span><br><span class="line">    &#125;</span><br><span class="line">    teeConfig.outputFd = open(teeConfig.outputPath, outputFileFlag, <span class="number">0777</span>);</span><br><span class="line">    <span class="keyword">if</span> (teeConfig.outputFd == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"无法打开输出文件!\n"</span>);</span><br><span class="line">        _exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span> buff;</span><br><span class="line">    <span class="keyword">while</span> (read(STDIN_FILENO, &amp;buff, <span class="number">1</span>) &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>, buff);</span><br><span class="line">        <span class="keyword">if</span> (write(teeConfig.outputFd, &amp;buff, <span class="number">1</span>) == <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"无法写入输出文件!\n"</span>);</span><br><span class="line">        _exit(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (close(teeConfig.outputFd) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"无法关闭输出文件!\n"</span>);</span><br><span class="line">        _exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2"><a href="#4-2" class="headerlink" title="4-2"></a>4-2</h3><p>编写一个类似于cp命令的程序，当使用该程序复制一个包含空洞的文件时，能够使得目标文件和源文件内容保持一致</p><p>这个程序思路比较简单，读取源文件的一个字符，如果是0的话，使用lseek右移一个文件偏移量。否则将字符写入目标文件中。</p><p>文件空洞 ：当文件的偏移量大于文件的当前长度时，文件结尾到新写入数据之间的空间称为文件空洞。读取文件空洞的内容会返回以0填充的缓冲区。</p><p>　　　　　“空洞是否占用磁盘空间由文件系统决定”<br>　　　　　“如果空洞的边界落在块内，而非恰好落在块的边界上，则会分配一个完整的块来存储数据，块中与空洞相关的部分则以空字节填充”—-书本提示</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">copyConfigStruct</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> inputFd;</span><br><span class="line">    <span class="keyword">int</span> outputFd;</span><br><span class="line">    <span class="keyword">char</span> *intputPath;</span><br><span class="line">    <span class="keyword">char</span> *outputPath;</span><br><span class="line">&#125;copyConfig;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *<span class="keyword">const</span> argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(argc &lt;<span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"参数过少\n"</span>);</span><br><span class="line">        _exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    copyConfig.intputPath = argv[<span class="number">1</span>];</span><br><span class="line">    copyConfig.outputPath = argv[<span class="number">2</span>];</span><br><span class="line">    copyConfig.inputFd = open(copyConfig.intputPath,O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span>(copyConfig.inputFd == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"打开文件失败\n"</span>);</span><br><span class="line">        _exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">     copyConfig.outputFd = open(copyConfig.outputPath, O_RDWR|O_TRUNC|O_CREAT, <span class="number">0777</span>);</span><br><span class="line">    <span class="keyword">if</span>(copyConfig.outputFd == <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"输出文件打开失败！\n"</span>);</span><br><span class="line">        _exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span> buff;</span><br><span class="line">    <span class="keyword">while</span>( read(copyConfig.inputFd, &amp;buff, <span class="number">1</span>) &gt; <span class="number">0</span> )&#123;</span><br><span class="line">        <span class="keyword">if</span> (buff == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(lseek(copyConfig.outputFd, <span class="number">1</span>, SEEK_CUR) == <span class="number">-1</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"跳过空洞失败！\n"</span>);</span><br><span class="line">                _exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(write(copyConfig.outputFd, &amp;buff, <span class="number">1</span>) == <span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"写入文件失败！\n"</span>);</span><br><span class="line">            _exit(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    close(copyConfig.inputFd);</span><br><span class="line">    close(copyConfig.outputFd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;作为一个咸鱼废了好久,期中很多考试,复习有点无聊,开始之前准备看的linux/unix系统编程手册&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;另外去官网找源代码和头文件,make失败,尝试了一会儿就放弃了,毕竟影响不大&lt;/p&gt;
&lt;h3 id=&quot;4-
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="unix系统编程手册" scheme="http://yoursite.com/tags/unix%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>CSAPP bomblab（伪）报告</title>
    <link href="http://yoursite.com/2018/04/23/bombLab/"/>
    <id>http://yoursite.com/2018/04/23/bombLab/</id>
    <published>2018-04-23T15:00:01.000Z</published>
    <updated>2018-05-07T09:29:21.534Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="CSAPP" scheme="http://yoursite.com/tags/CSAPP/"/>
    
  </entry>
  
  <entry>
    <title>随想啦啦啦</title>
    <link href="http://yoursite.com/2018/04/20/Linux/"/>
    <id>http://yoursite.com/2018/04/20/Linux/</id>
    <published>2018-04-19T17:57:12.000Z</published>
    <updated>2018-05-07T09:29:16.326Z</updated>
    
    <content type="html"><![CDATA[<h1 id="开坑Linux啦"><a href="#开坑Linux啦" class="headerlink" title="开坑Linux啦"></a>开坑Linux啦</h1><blockquote><p>从开学进来已经相当久了，但是感觉学的东西很少，平时也是比较迷茫，不知道学什么，上次进行了联创的春招熬测后，确实是收获很多，有了很多想法，ps(挺感谢这个组织的，大概也是从想进联创开始入的计算机的坑吧，很想加入它，但是想来希望不大了，以后可能还会以学习的心态去看看考试题，没报什么希望)，后面很长时间可能一直待在Linux的坑里面。</p></blockquote><h2 id="书单计划"><a href="#书单计划" class="headerlink" title="书单计划"></a>书单计划</h2><ol><li>Linux/Unix系统编程手册</li><li>Linux/Unix编程实践教程</li><li>深入理解Linux内核</li><li>清华的操作系统的课</li><li>UNP卷一</li></ol><p>另外这次也去看看了冰岩的程序组，感觉后端似乎也挺好玩，或许会开新的坑。</p><p>ACM还是要继续(划水)，好玩的东西</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;开坑Linux啦&quot;&gt;&lt;a href=&quot;#开坑Linux啦&quot; class=&quot;headerlink&quot; title=&quot;开坑Linux啦&quot;&gt;&lt;/a&gt;开坑Linux啦&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;从开学进来已经相当久了，但是感觉学的东西很少，平时也是比较迷茫，不
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>CSAPP datelab（伪）报告</title>
    <link href="http://yoursite.com/2018/04/14/datelab/"/>
    <id>http://yoursite.com/2018/04/14/datelab/</id>
    <published>2018-04-14T10:43:19.000Z</published>
    <updated>2018-04-17T15:06:57.179Z</updated>
    
    <content type="html"><![CDATA[<p>CSAPP的第一个Lab<br><a id="more"></a></p><h1 id="CSAPP-datelab"><a href="#CSAPP-datelab" class="headerlink" title="CSAPP datelab"></a>CSAPP datelab</h1><blockquote><p>读CSAPP这本书的过程中出现了很多的困难，同时，我读这本书时间耗时很长但是<br>又完全没有弄懂很多东西，在迷迷糊糊的把书看完一遍后开始准备做配套的lab已以及准备南大的计算机系统配套的实验在这个过程中重新把书看一遍。</p></blockquote><blockquote><p>另外做这个Lab感觉难度不小，后面可能要补补离散</p></blockquote><p>datelab分为3个部分，位操作，整数操作，浮点操作</p><h2 id="位操作"><a href="#位操作" class="headerlink" title="位操作"></a>位操作</h2><h3 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 1 √</span></span><br><span class="line"><span class="comment"> * bitAnd - x&amp;y using only ~ and |</span></span><br><span class="line"><span class="comment"> *   Example: bitAnd(6, 5) = 4</span></span><br><span class="line"><span class="comment"> *   Legal ops: ~ |</span></span><br><span class="line"><span class="comment"> *   Max ops: 8</span></span><br><span class="line"><span class="comment"> *   Rating: 1</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>这个比较简单<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bitAnd</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ~((~x) | (~y));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 2 √</span></span><br><span class="line"><span class="comment"> * getByte - Extract byte n from word x</span></span><br><span class="line"><span class="comment"> *   Bytes numbered from 0 (LSB) to 3 (MSB)</span></span><br><span class="line"><span class="comment"> *   Examples: getByte(0x12345678,1) = 0x56</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 6</span></span><br><span class="line"><span class="comment"> *   Rating: 2</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>提取一个数字的n字节,这里使用掩码0xFF来取一个字节<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getByte</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (x&gt;&gt;(n&lt;&lt;<span class="number">3</span>)) &amp; <span class="number">0xFF</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 3 √</span></span><br><span class="line"><span class="comment"> * logicalShift - shift x to the right by n, using a logical shift</span></span><br><span class="line"><span class="comment"> *   Can assume that 0 &lt;= n &lt;= 31</span></span><br><span class="line"><span class="comment"> *   Examples: logicalShift(0x87654321,4) = 0x08765432</span></span><br><span class="line"><span class="comment"> *   Legal ops: ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 20</span></span><br><span class="line"><span class="comment"> *   Rating: 3</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>取出高位，然后把高位变为0（使用掩码）<br>最后把取出的高位放回去<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">logicalShift</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> a=x&amp;(<span class="number">1</span>&lt;&lt;<span class="number">31</span>);</span><br><span class="line">  <span class="keyword">int</span> b=x&amp;(~(<span class="number">1</span>&lt;&lt;<span class="number">31</span>));</span><br><span class="line">  b&gt;&gt;=n;</span><br><span class="line">  b |= (a&gt;&gt;n)&amp;(<span class="number">1</span>&lt;&lt;<span class="number">32</span>+~n)<span class="comment">/*大坑.....注意a也是逻辑右移所以要用掩码取位*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="第四题"><a href="#第四题" class="headerlink" title="第四题"></a>第四题</h3><blockquote><p>/* 4 √</p><ul><li>bitCount - returns count of number of 1’s in word</li><li>Examples: bitCount(5) = 2, bitCount(7) = 3</li><li>Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</li><li>Max ops: 40</li><li>Rating: 4</li></ul></blockquote><p>ACM做题的时候分治法的时候讲过，把32位的数分为16组，每组的两个数相加，得到16个数，然后重复即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bitCount</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> bits = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> mask = <span class="number">0x1</span> | (<span class="number">0x1</span> &lt;&lt; <span class="number">8</span>) | (<span class="number">0x1</span> &lt;&lt; <span class="number">16</span>) | (<span class="number">0x1</span> &lt;&lt; <span class="number">24</span>);</span><br><span class="line">    bits += (x &amp; mask);</span><br><span class="line">    bits += ((x &gt;&gt; <span class="number">1</span>) &amp; mask);</span><br><span class="line">    bits += ((x &gt;&gt; <span class="number">2</span>) &amp; mask);</span><br><span class="line">    bits += ((x &gt;&gt; <span class="number">3</span>) &amp; mask);</span><br><span class="line">    bits += ((x &gt;&gt; <span class="number">4</span>) &amp; mask);</span><br><span class="line">    bits += ((x &gt;&gt; <span class="number">5</span>) &amp; mask);</span><br><span class="line">    bits += ((x &gt;&gt; <span class="number">6</span>) &amp; mask);</span><br><span class="line">    bits += ((x &gt;&gt; <span class="number">7</span>) &amp; mask);</span><br><span class="line">    <span class="keyword">return</span> (bits &amp; <span class="number">0xFF</span>) + ((bits &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>) + ((bits &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>) + ((bits &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第五题"><a href="#第五题" class="headerlink" title="第五题"></a>第五题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/* 5 √</span><br><span class="line"> * bang - Compute !x without using !</span><br><span class="line"> *   Examples: bang(3) = 0, bang(0) = 1</span><br><span class="line"> *   Legal ops: ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span><br><span class="line"> *   Max ops: 12</span><br><span class="line"> *   Rating: 4</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><p>计算数字的逆（！）<br>很巧妙，0的特征，0和0的相反数首位按位或为0<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bang</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ((x|(~x+<span class="number">1</span>))&gt;&gt;<span class="number">31</span>)&amp;<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="补码运算"><a href="#补码运算" class="headerlink" title="补码运算"></a>补码运算</h2><h3 id="第六题"><a href="#第六题" class="headerlink" title="第六题"></a>第六题</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">tmin</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span>(<span class="number">1</span>&lt;&lt;<span class="number">31</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第七题"><a href="#第七题" class="headerlink" title="第七题"></a>第七题</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">思路：</span><br><span class="line">分正负数，分别前面为<span class="number">0</span>或<span class="number">1</span>，只需判断<span class="number">32</span>-n是否全<span class="number">0</span>或<span class="number">1</span>，通过掩码取这些位即可</span><br><span class="line">```c</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fitsBits</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !((x &lt;&lt; (<span class="number">33</span> + ~n) &gt;&gt; (<span class="number">33</span> + ~n))^x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第八题"><a href="#第八题" class="headerlink" title="第八题"></a>第八题</h3><p>题意：数除以2^n<br>对于正数直接算术右移即可，对于负数</p><h3 id="第九题"><a href="#第九题" class="headerlink" title="第九题"></a>第九题</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">negate</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> ~x + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第十题"><a href="#第十题" class="headerlink" title="第十题"></a>第十题</h3><p>判断正数，高位为0避开0；<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isPositive</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (!(x &gt;&gt; <span class="number">31</span>)) ^ (!(x ^ <span class="number">0</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CSAPP的第一个Lab&lt;br&gt;
    
    </summary>
    
    
      <category term="CSAPP" scheme="http://yoursite.com/tags/CSAPP/"/>
    
  </entry>
  
  <entry>
    <title>读csapp中的感悟</title>
    <link href="http://yoursite.com/2018/03/19/%E8%AF%BBcsapp%E4%B8%AD%E7%9A%84%E6%84%9F%E6%82%9F/"/>
    <id>http://yoursite.com/2018/03/19/读csapp中的感悟/</id>
    <published>2018-03-19T02:16:58.000Z</published>
    <updated>2018-05-07T09:33:27.608Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="CSAPP" scheme="http://yoursite.com/tags/CSAPP/"/>
    
      <category term="读书感悟" scheme="http://yoursite.com/tags/%E8%AF%BB%E4%B9%A6%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
</feed>
